buildscript {
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    }
}

// Apply Gradle plugins
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    id 'com.github.hierynomus.license' version '0.11.0'
}

defaultTasks 'clean', 'licenseFormat', 'build'

// Project information
group = 'net.minecrell'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations { provided }
sourceSets.main.compileClasspath += configurations.provided
idea.module.scopes.PROVIDED.plus += [configurations.provided]

// Project repositories
repositories {
    mavenCentral()
    maven {
        name = 'minecrell'
        url = 'http://repo.minecrell.net/snapshots'
    }
}

// Project dependencies
dependencies {
    compile 'com.google.guava:guava:19.0'
    compile 'net.minecrell:fernflower:2.0-SNAPSHOT'
    compile 'org.fxmisc.richtext:richtextfx:0.6.10'

    provided 'com.google.code.findbugs:jsr305:3.0.1'

    testCompile 'junit:junit:4.12'
}

// Read source files using UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

processResources {
    from 'LICENSE'
}

ext.output = jar.archivePath
jar {
    classifier = 'base'

    manifest {
        attributes(
                'Implementation-Title': project.projectName,
                'Implementation-Version': version,
                'Main-Class': 'net.minecrell.dandelion.Dandelion'
        )
    }
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: 'jar') {
    ext.javaHome = System.properties['java.home']
    libraryjars "$javaHome/lib/rt.jar"
    libraryjars "$javaHome/lib/ext/jfxrt.jar"
    libraryjars configurations.provided

    injars jar.archivePath
    injars configurations.compile
    outjars output

    keep 'class net.minecrell.dandelion.** {*;}'

    dontwarn 'com.google.common.**'
    dontobfuscate
    dontoptimize
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives output
    archives sourceJar
}

assemble.dependsOn 'proguard'

// License header formatting
license {
    header = file('LICENSE')
    include '**/*.java'

    ignoreFailures = false
    strictCheck = true

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}
